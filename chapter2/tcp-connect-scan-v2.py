#!/usr/bin/python3
# coding: UTF-8

# This code is based on https://github.com/oreilly-japan/pentest-starting-with-port-scanner
# https://github.com/oreilly-japan/pentest-starting-with-port-scanner/blob/main/code/chapter02/tcp-connect-scan-v2.py
# Kotake Taichi @Sterra Security Co.,Ltd., "pentest starting with port scanner", O'reilly Japan, ISBN 978-4-8144-0042-3

import sys
from scapy.all import IP, TCP, sr1
import time
import re

if len(sys.argv) != 3:
    print(f"[usage] : {{sudo}} python3 {sys.argv[0]} {{dst IP addr}} {{dst port}}\nsudo should be added when needed.")
    sys.exit()

target_ip = sys.argv[1]
target_port = int(sys.argv[2])

# check the address and port format
if re.fullmatch(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}', target_ip) == None:
    print("[ERROR] : Destination IP Address is malformat...")
    sys.exit()
if not(type(target_port) is int):
    print("[ERROR] : Destination IP port is not a number...")
    sys.exit()

ip_layer = IP(dst=target_ip)

# create SYN packet
syn_pkt = ip_layer/TCP(dport=target_port, flags='S') # S means SYN packet

# send the packet, and receive the response
print("[running] Send SYN packet")
response_pkt = sr1(syn_pkt)
print(f"[running] Response : {response_pkt}")
print("----------------------------------------")

# # decide the dst port is open if SYN/ACK pkt is returned
# if (response_pkt.haslayer(TCP) and response_pkt[TCP].flags == "SA"): # SA measn SYN/ACK
#     print(f"TCP port {target_port} @ {target_ip} is open.")
# else:
#     print(f"TCP port {target_port} @ {target_ip} is closed...")

# Send ACK pkt if SYN/ACK pkt is returned
if (response_pkt.haslayer(TCP) and response_pkt[TCP].flags == "SA"): # SA measn SYN/ACK
    tcp_layer = TCP(
                    dport=target_port,
                    flags="A",                  # A means ACK
                    ack=response_pkt.seq + 1,
                    seq=response_pkt.ack
                )
    ack_packet = ip_layer/tcp_layer
    print("[running] Send ACK packet")
    response_after_handshake = sr1(ack_packet, timeout=3)
    print(f"[running] Response : {response_after_handshake}")
    print("----------------------------------------")
    print(f"TCP port {target_port} @ {target_ip} is open.")

    # finish the connection
    print("[running] Send FIN packet")
    fin_tcp_layer = TCP(
                    dport=target_port,
                    flags="FA",
                    ack=response_pkt.seq + 1,
                    seq=response_pkt.ack
                )
    fin_pkt = ip_layer/fin_tcp_layer
    response_fin_pkt = sr1(fin_pkt, timeout=3)
    print(f"[running] Response : {response_fin_pkt}")
    print("----------------------------------------")

    # Send ACK pkt if FIN pkt is returned
    if  (response_fin_pkt.haslayer(TCP) and response_fin_pkt[TCP].flags == "FA"):
        print("[running] Send ACK packet")
        ack_after_fin_tcp_layer = TCP(
                                        dport=target_port,
                                        flags="A",
                                        ack=response_fin_pkt.seq + 1,
                                        seq=response_fin_pkt.ack
                                    )
        ack_pkt_after_fin = ip_layer/ack_after_fin_tcp_layer
        sr1(ack_pkt_after_fin, timeout=3)
        print("[running] Connection closed.")
    else:
        print("[ERROR] : Failed to close the connection...")

else:
    print(f"TCP port {target_port} @ {target_ip} is closed...")
