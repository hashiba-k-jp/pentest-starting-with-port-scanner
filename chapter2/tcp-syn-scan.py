#!/usr/bin/python3
# coding: UTF-8

# This code is based on https://github.com/oreilly-japan/pentest-starting-with-port-scanner
# https://github.com/oreilly-japan/pentest-starting-with-port-scanner/blob/main/code/chapter02/tcp-syn-scan.py
# Kotake Taichi @Sterra Security Co.,Ltd., "pentest starting with port scanner", O'reilly Japan, ISBN 978-4-8144-0042-3

import sys
from scapy.all import IP, TCP, sr1
import re

if len(sys.argv) != 3:
    print(f"[usage] : {{sudo}} python3 {sys.argv[0]} {{dst IP addr}} {{dst port}}\nsudo should be added when needed.")
    sys.exit()

target_ip = sys.argv[1]
target_port = int(sys.argv[2])

# check the address and port format
if re.fullmatch(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}', target_ip) == None:
    print("[ERROR] : Destination IP Address is malformat...")
    sys.exit()
if not(type(target_port) is int):
    print("[ERROR] : Destination IP port is not a number...")
    sys.exit()

# create sys packet
syn_pkt = IP(dst=target_ip)/TCP(dport=target_port, flags='S') # S means SYN packet

# send the packet, and receive the response
response_pkt = sr1(syn_pkt)

# decide the dst port is open if SYN/ACK pkt is returned
if (response_pkt.haslayer(TCP) and response_pkt[TCP].flags == "SA"): # SA measn SYN/ACK
    print(f"TCP port {target_port} @ {target_ip} is open.")
else:
    print(f"TCP port {target_port} @ {target_ip} is closed...")
